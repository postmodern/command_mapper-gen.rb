#!/usr/bin/env ruby

lib_dir = File.expand_path('../lib',__dir__)
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

require 'command_mapper/gen/parsers'
require 'command_mapper/gen/command'
require 'command_mapper/gen/version'

require 'optparse'

PROGRAM_NAME = File.basename($0)

PARSERS = {
'help' => CommandMapper::Gen::Parsers::Help,
'man'  => CommandMapper::Gen::Parsers::Man
}

parsers = [
  CommandMapper::Gen::Parsers::Help,
  CommandMapper::Gen::Parsers::Man
]
output = nil

optparser = OptionParser.new do |opts|
  opts.banner = "usage: #{PROGRAM_NAME} [options] [COMMAND_NAME]"

  opts.separator ""
  opts.separator "Options:"

  opts.on('-o','--output FILE','Saves the output to FILE') do |file|
    output = file
  end

  opts.on('-p','--parser=PARSER', PARSERS, 'Selects which parser to use (help or man)') do |parser|
    parsers = [parser]
  end

  opts.on('-V','--version','Print the version') do
    puts "command_mapper-gen #{CommandMapper::Gen::VERSION}"
    exit
  end

  opts.on('-h','--help','Print the help output') do
    puts opts
    exit
  end

  opts.separator ""
  opts.separator "Examples:"
  opts.separator "    command_mapper-gen grep"
  opts.separator ""
end
optparser.parse!

BUG_REPORT_URL = "https://github.com/postmodern/command_mapper-gen/issues"

def print_backtrace(exception)
  $stderr.puts "Oops! Looks like you've found a bug!"
  $stderr.puts "Please report the following to: #{BUG_REPORT_URL}"
  $stderr.puts
  $stderr.puts "```"
  $stderr.puts "#{exception.full_message}"
  $stderr.puts "```"
end

if ARGV[0]
  command = CommandMapper::Gen::Command.new(ARGV[0])

  parsers.each do |parser|
    begin
      parser.run(command)
    rescue => error
      print_backtrace(error)
      exit -1
    end
  end
else
  command = CommandMapper::Gen::Command.new
  parser  = CommandMapper::Gen::Parsers::Help.new(command)

  begin
    parser.parse(STDIN.read)
  rescue => error
    print_backtrace(error)
    exit -1
  end
end

if (command.options.empty? && command.arguments.empty?)
  $stderr.puts "#{PROGRAM_NAME}: no options or arguments detected"
  exit -2
end

if output then command.save(output)
else           puts command.to_ruby
end
